<?php

/**
 * @file
 * Install file for SDP Platform Drupal Modules.
 */

use Drupal\Core\Serialization\Yaml;
use Drupal\Core\File\FileSystemInterface;
use Drupal\baywatch\BaywatchOperation;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function baywatch_install() {
  if (\Drupal::service('module_handler')->moduleExists('bay')) {
    \Drupal::service('module_installer')->uninstall('bay');
  }
  $baywatch = new BaywatchOperation();
  $baywatch->import_sdpa_password_policy();
  $baywatch->enable_queue_mail();
  $baywatch->cleanup_tables();
  $baywatch->import_authenticated_content_key();
  $baywatch->enable_config_split();
  $baywatch->enable_preview();
  $baywatch->enable_share_links();
  $baywatch->remove_previewer_role();
  $baywatch->remove_purge_lateruntime();
  $baywatch->remove_authenticated_content();
  $baywatch->enable_tide_edit_protection();
  $baywatch->enable_tide_dashboard();
  $baywatch->enable_tide_paragraphs_enhanced_modal();
  $baywatch->set_default_timezone();
  $baywatch->exclude_files_path();
  $baywatch->import_default_section_config();
  $baywatch->enable_tide_block_inactive_users();
}

/**
 * Import sdpa password policy.
 */
function baywatch_import_sdpa_password_policy() {
  $module_installer = \Drupal::service('module_installer');
  $module_handler = \Drupal::moduleHandler();
  // Enables required password_policy module.
  if (!$module_handler->moduleExists('password_policy')) {
    $module_installer->install(['password_policy']);
  }
  // Enables required sub modules.
  if (!$module_handler->moduleExists('password_policy_character_types')) {
    $module_installer->install(['password_policy_character_types']);
  }
  if (!$module_handler->moduleExists('password_policy_characters')) {
    $module_installer->install(['password_policy_characters']);
  }
  if (!$module_handler->moduleExists('password_policy_consecutive')) {
    $module_installer->install(['password_policy_consecutive']);
  }
  if (!$module_handler->moduleExists('password_policy_history')) {
    $module_installer->install(['password_policy_history']);
  }
  if (!$module_handler->moduleExists('password_policy_length')) {
    $module_installer->install(['password_policy_length']);
  }
  if (!$module_handler->moduleExists('password_policy_username')) {
    $module_installer->install(['password_policy_username']);
  }
  if (!$module_handler->moduleExists('password_strength')) {
    $module_installer->install(['password_strength']);
  }
  // Remove default password policy if exists.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('password_policy.password_policy.default');
  $default_id = $config->get('id');
  if (!empty($default_id)) {
    $config->delete();
    echo "Password policy with id " . $default_id . " has been deleted.\n";
  }
  $configs = [
    'password_policy.password_policy.password_policy_sdpa' => 'password_policy',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'baywatch') . '/config/optional'];
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = substr($config, strrpos($config, '.') + 1);
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }
}

/**
 * Import sdpa password policy as an update.
 */
function baywatch_update_8001() {
  baywatch_import_sdpa_password_policy();
}

/**
 * Updates queue_mail settings.
 *
 * Strip the previously configured "queue_mail_keys" as now all mail should go
 * through the queue.
 */
function baywatch_update_8002() {
  // Check if queue_mail is both installed and enabled.
  if (\Drupal::moduleHandler()->moduleExists('queue_mail') === FALSE) {
    // If not, install the queue_mail module.
    \Drupal::service('module_installer')->install(['queue_mail']);
  }
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('queue_mail.settings');
  $config->set('queue_mail_keys', '*');
  $config->save();
}

/**
 * [DDIDO-256] Clean up orphaned tables from failed core update.
 */
function baywatch_update_8003() {
  $tables = [];
  $r = \Drupal::database()->query("SHOW TABLES LIKE 'old_%'");
  $rows = $r->fetchCol();
  if (!empty($rows)) {
    foreach ($rows as $row) {
      $tables[] = $row;
    }
  }

  foreach ($tables as $table) {
    try {
      \Drupal::messenger()->addMessage("Dropping obsolete table ${table}");
      \Drupal::database()->query(sprintf("DROP TABLE %s;", $table));
    }
    catch (\Exception $e) {
      \Drupal::messenger()->addMessage("Error when dropping table ${table}");
      \Drupal::logger('baywatch')->error($e->getMessage());
    }
  }
}

/**
 * Import authenticated_content key.
 */
function baywatch_update_8004() {
  $configs = [
    'key.key.authenticated_content' => 'key',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'baywatch') . '/config/optional'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = substr($config, strrpos($config, '.') + 1);
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }
}

/**
 * Update config_split configs.
 */
function baywatch_update_8005() {
  $configs = [
    'config_split.config_split.ci' => 'config_split',
    'config_split.config_split.dev' => 'config_split',
    'config_split.config_split.local' => 'config_split',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'baywatch') . '/config/optional'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = substr($config, strrpos($config, '.') + 1);
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
    else {
      $config_file = DRUPAL_ROOT . '/' . drupal_get_path('module', 'baywatch') . '/config/optional/' . $config . '.yml';
      $inactive_config_values = Yaml::decode(file_get_contents($config_file));
      $inactive_graylist = $inactive_config_values['graylist'];
      $active_config = \Drupal::configFactory()->getEditable($config);
      $active_graylist = $active_config->get('graylist');
      if ($config == 'config_split.config_split.dev') {
        if (in_array('clamav.settings', $active_graylist)) {
          if (($key = array_search('clamav.settings', $active_graylist)) !== FALSE) {
            unset($active_graylist[$key]);
          }
        }
      }
      $result = array_unique(array_merge($active_graylist, $inactive_graylist));
      $active_config->set('graylist', $result)->save();
    }
  }
}

/**
 * Enable Tide OAuth & site preview module.
 */
function baywatch_update_8006() {
  $private = 'private://';
  \Drupal::service('file_system')->prepareDirectory($private, FileSystemInterface::CREATE_DIRECTORY);

  // Check if tide_oauth is both installed and enabled.
  if (\Drupal::moduleHandler()->moduleExists('tide_oauth') === FALSE) {
    // If not, install the tide_oauth module.
    \Drupal::service('module_installer')->install(['tide_oauth']);
  }

  // Check if tide_site_preview is both installed and enabled.
  if (\Drupal::moduleHandler()->moduleExists('tide_site_preview') === FALSE) {
    // If not, install the tide_site_preview module.
    \Drupal::service('module_installer')->install(['tide_site_preview']);
  }

  $consumers = \Drupal::entityTypeManager()->getStorage('consumer')
    ->loadByProperties([
      'machine_name' => 'editorial_preview',
      'is_default' => FALSE,
    ]);
  if ($consumers) {
    /** @var \Drupal\consumers\Entity\Consumer $consumer */
    $consumer = reset($consumers);
    $consumer->set('uuid', 'dc881486-c14a-4b92-a0d0-e5dcd706f5ad')->save();
  }
}

/**
 * Enable Tide share link module, update shield config & previewer permissions.
 */
function baywatch_update_8007() {
  // Check if tide_share_link is both installed and enabled.
  if (\Drupal::moduleHandler()->moduleExists('tide_share_link') === FALSE) {
    // If not, install the tide_share_link module.
    \Drupal::service('module_installer')->install(['tide_share_link']);
  }
  // Update shield config to exclude oauth path.
  if (\Drupal::moduleHandler()->moduleExists('shield') === TRUE) {
    $shield_settings = \Drupal::configFactory()->getEditable('shield.settings');
    $path = "/oauth\r\n/oauth/authorize\r\n/oauth/token";
    $shield_settings->set('domains', '');
    $shield_settings->set('method', 0);
    $shield_settings->set('paths', $path);
    $shield_settings->save();
  }
  // Add new permission to previewer role.
  $permissions = ['bypass site restriction'];
  user_role_grant_permissions('previewer', $permissions);
}

/**
 * Revoke previewer permission from all users.
 */
function baywatch_update_8008(&$sandbox) {
  $results = \Drupal::entityQuery('user')
    ->condition('roles', 'previewer')
    ->execute();
  if (!empty($results)) {
    $users = \Drupal::entityTypeManager()->getStorage('user')
      ->loadMultiple($results);

    // Remove previewer role in batches.
    if (!isset($sandbox['total'])) {
      $sandbox['total'] = count($users);
      $sandbox['processed'] = 0;
      $sandbox['#finished'] = 0;
    }
    $batch_size = 10;
    $batch = array_slice($users, 0, $batch_size);
    foreach ($batch as $user) {
      $user->removeRole('previewer');
      $user->save();
      $sandbox['processed']++;
    }
    $sandbox['#finished'] = $sandbox['total'] ? $sandbox['processed'] / $sandbox['total'] : 1;
    $sandbox['#finished'] = $sandbox['#finished'] > 1 ? 1 : $sandbox['#finished'];
  }
}

/**
 * Uninstall tide_authenticated_content.
 * Except Vicpol and SSP.
 */
function baywatch_update_8009() {
  $baywatch = new BaywatchOperation();
  $baywatch->remove_authenticated_content();
}

/**
 * Uninstall the late runtime processor.
 */
function baywatch_update_8010() {
  \Drupal::service('module_installer')->uninstall(['purge_processor_lateruntime']);
}

/**
 * Enable tide_edit_protection module.
 */
function baywatch_update_8011() {
  $baywatch = new BaywatchOperation();
  $baywatch->enable_tide_edit_protection();
}

/**
 * Enable CMS improvement work related module.
 */
function baywatch_update_8012() {
  $baywatch = new BaywatchOperation();
  // Enable tide_dashboard module.
  $baywatch->enable_tide_dashboard();
  // Enable tide_paragraphs_enhanced_modal module.
  $baywatch->enable_tide_paragraphs_enhanced_modal();
}

/**
 * Enable tide_ui_restriction module.
 */
function baywatch_update_8013() {
  $baywatch = new BaywatchOperation();
  $baywatch->enable_tide_ui_restriction();
}

/**
 * Excludes files path in shield setting.
 */
function baywatch_update_8014() {
  $baywatch = new BaywatchOperation();
  $baywatch->exclude_files_path();
}

/**
 * Enables tide_block_inactive_users module.
 */
function baywatch_update_8015() {
  $baywatch = new BaywatchOperation();
  $baywatch->enable_tide_block_inactive_users();
}
