<?php

/**
 * @file
 * Install file for SDP Platform Drupal Modules.
 */

use Drupal\Core\Serialization\Yaml;
/**
 * Implements hook_install().
 */
function baywatch_install() {
  if (\Drupal::service('module_handler')->moduleExists('bay')) {
    \Drupal::service('module_installer')->uninstall('bay');
  }

  // This Will import password policy during first install of the module.
  baywatch_import_sdpa_password_policy();

  // Ensure queue_mail is configured to handle all mail.
  baywatch_update_8002();

  // Import key.key.authenticated_content.
  baywatch_update_8003();

  // Import config_split configs.
  baywatch_update_8004();
}

/**
 * Import sdpa password policy.
 */
function baywatch_import_sdpa_password_policy() {
  if (\Drupal::moduleHandler()->moduleExists('password_policy')) {
    // Remove default password policy if exists.
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('password_policy.password_policy.default');
    $default_id = $config->get('id');
    if (!empty($default_id)) {
      $config->delete();
      echo "Password policy with id " . $default_id . " has been deleted.\n";
    }
    // Import the sdpa password policy.
    module_load_include('inc', 'tide_core', 'includes/helpers');
    $config_location = [drupal_get_path('module', 'baywatch') . '/config/optional'];
    _tide_import_single_config('password_policy.password_policy.password_policy_sdpa', $config_location);
  }
}

/**
 * Import sdpa password policy as an update.
 */
function baywatch_update_8001() {
  baywatch_import_sdpa_password_policy();
}

/**
 * Updates queue_mail settings.
 *
 * Strip the previously configured "queue_mail_keys" as now all mail should go
 * through the queue.
 */
function baywatch_update_8002() {
  // Check if queue_mail is both installed and enabled.
  if (\Drupal::moduleHandler()->moduleExists('queue_mail') === FALSE) {
    // If not, install the queue_mail module.
    \Drupal::service('module_installer')->install(['queue_mail']);
  }
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('queue_mail.settings');
  $config->set('queue_mail_keys', '*');
  $config->save();
}

/**
 * Import authenticated_content key.
 */
function baywatch_update_8003() {
  $configs = [
    'key.key.authenticated_content' => 'key',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'baywatch') . '/config/optional'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = substr($config, strrpos($config, '.') + 1);
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }
}

/**
 * Update config_split configs.
 */
function baywatch_update_8004() {
  $configs = [
    'config_split.config_split.ci' => 'config_split',
    'config_split.config_split.dev' => 'config_split',
    'config_split.config_split.local' => 'config_split',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'baywatch') . '/config/optional'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = substr($config, strrpos($config, '.') + 1);
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
    else {
      $file = DRUPAL_ROOT . '/' . drupal_get_path('module', 'baywatch') . '/config/optional/' . $config . '.yml';
      $config_values = Yaml::decode(file_get_contents($file));
      $config = \Drupal::configFactory()->getEditable($config);
      $config->set('graylist', $config_values['graylist'])->save();
    }
  }
}
